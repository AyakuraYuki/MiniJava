(goal (mainClassDeclaration class BinarySearch (mainClassBody { (mainMethod (mainMethodDeclaration public static void main ( String [ ] a )) { (statement System.out.println ( (expression (expression new BS ( )) . Start (methodArgumentList ( (expression 20) ))) ) ;) }) })) (classDeclaration class BS (classBody { (fieldDeclaration (mytype (intArrayType int [ ])) number ;) (fieldDeclaration (mytype (intType int)) size ;) (methodDeclaration public (mytype (intType int)) Start (formalParameters ( (formalParameterList (formalParameter (mytype (intType int)) sz)) )) (methodBody { (varDeclaration (mytype (intType int)) aux01 ;) (varDeclaration (mytype (intType int)) aux02 ;) (statement aux01 = (expression (expression this) . Init (methodArgumentList ( (expression sz) ))) ;) (statement aux02 = (expression (expression this) . Print (methodArgumentList ( ))) ;) (statement if ( (expression (expression this) . Search (methodArgumentList ( (expression 8) ))) ) (statement System.out.println ( (expression 1) ) ;) else (statement System.out.println ( (expression 0) ) ;)) (statement if ( (expression (expression this) . Search (methodArgumentList ( (expression 19) ))) ) (statement System.out.println ( (expression 1) ) ;) else (statement System.out.println ( (expression 0) ) ;)) (statement if ( (expression (expression this) . Search (methodArgumentList ( (expression 20) ))) ) (statement System.out.println ( (expression 1) ) ;) else (statement System.out.println ( (expression 0) ) ;)) (statement if ( (expression (expression this) . Search (methodArgumentList ( (expression 21) ))) ) (statement System.out.println ( (expression 1) ) ;) else (statement System.out.println ( (expression 0) ) ;)) (statement if ( (expression (expression this) . Search (methodArgumentList ( (expression 37) ))) ) (statement System.out.println ( (expression 1) ) ;) else (statement System.out.println ( (expression 0) ) ;)) (statement if ( (expression (expression this) . Search (methodArgumentList ( (expression 38) ))) ) (statement System.out.println ( (expression 1) ) ;) else (statement System.out.println ( (expression 0) ) ;)) (statement if ( (expression (expression this) . Search (methodArgumentList ( (expression 39) ))) ) (statement System.out.println ( (expression 1) ) ;) else (statement System.out.println ( (expression 0) ) ;)) (statement if ( (expression (expression this) . Search (methodArgumentList ( (expression 50) ))) ) (statement System.out.println ( (expression 1) ) ;) else (statement System.out.println ( (expression 0) ) ;)) (statement return (expression 999) ;) })) (methodDeclaration public (mytype (booleanType boolean)) Search (formalParameters ( (formalParameterList (formalParameter (mytype (intType int)) num)) )) (methodBody { (varDeclaration (mytype (booleanType boolean)) bs01 ;) (varDeclaration (mytype (intType int)) right ;) (varDeclaration (mytype (intType int)) left ;) (varDeclaration (mytype (booleanType boolean)) var_cont ;) (varDeclaration (mytype (intType int)) medium ;) (varDeclaration (mytype (intType int)) aux01 ;) (varDeclaration (mytype (intType int)) nt ;) (statement aux01 = (expression 0) ;) (statement bs01 = (expression false) ;) (statement right = (expression (expression number) . length) ;) (statement right = (expression (expression right) - (expression 1)) ;) (statement left = (expression 0) ;) (statement var_cont = (expression true) ;) (statement while ( (expression var_cont) ) (statement { (statement medium = (expression (expression left) + (expression right)) ;) (statement medium = (expression (expression this) . Div (methodArgumentList ( (expression medium) ))) ;) (statement aux01 = (expression (expression number) [ (expression medium) ]) ;) (statement if ( (expression (expression num) < (expression aux01)) ) (statement right = (expression (expression medium) - (expression 1)) ;) else (statement left = (expression (expression medium) + (expression 1)) ;)) (statement if ( (expression (expression this) . Compare (methodArgumentList ( (expression aux01) , (expression num) ))) ) (statement var_cont = (expression false) ;) else (statement var_cont = (expression true) ;)) (statement if ( (expression (expression right) < (expression left)) ) (statement var_cont = (expression false) ;) else (statement nt = (expression 0) ;)) })) (statement if ( (expression (expression this) . Compare (methodArgumentList ( (expression aux01) , (expression num) ))) ) (statement bs01 = (expression true) ;) else (statement bs01 = (expression false) ;)) (statement return (expression bs01) ;) })) (methodDeclaration public (mytype (intType int)) Div (formalParameters ( (formalParameterList (formalParameter (mytype (intType int)) num)) )) (methodBody { (varDeclaration (mytype (intType int)) count01 ;) (varDeclaration (mytype (intType int)) count02 ;) (varDeclaration (mytype (intType int)) aux03 ;) (statement count01 = (expression 0) ;) (statement count02 = (expression 0) ;) (statement aux03 = (expression (expression num) - (expression 1)) ;) (statement while ( (expression (expression count02) < (expression aux03)) ) (statement { (statement count01 = (expression (expression count01) + (expression 1)) ;) (statement count02 = (expression (expression count02) + (expression 2)) ;) })) (statement return (expression count01) ;) })) (methodDeclaration public (mytype (booleanType boolean)) Compare (formalParameters ( (formalParameterList (formalParameter (mytype (intType int)) num1) , (formalParameter (mytype (intType int)) num2)) )) (methodBody { (varDeclaration (mytype (booleanType boolean)) retval ;) (varDeclaration (mytype (intType int)) aux02 ;) (statement retval = (expression false) ;) (statement aux02 = (expression (expression num2) + (expression 1)) ;) (statement if ( (expression (expression num1) < (expression num2)) ) (statement retval = (expression false) ;) else (statement if ( (expression ! (expression ( (expression (expression num1) < (expression aux02)) ))) ) (statement retval = (expression false) ;) else (statement retval = (expression true) ;))) (statement return (expression retval) ;) })) (methodDeclaration public (mytype (intType int)) Print (formalParameters ( )) (methodBody { (varDeclaration (mytype (intType int)) j ;) (statement j = (expression 1) ;) (statement while ( (expression (expression j) < (expression ( (expression size) ))) ) (statement { (statement System.out.println ( (expression (expression number) [ (expression j) ]) ) ;) (statement j = (expression (expression j) + (expression 1)) ;) })) (statement System.out.println ( (expression 99999) ) ;) (statement return (expression 0) ;) })) (methodDeclaration public (mytype (intType int)) Init (formalParameters ( (formalParameterList (formalParameter (mytype (intType int)) sz)) )) (methodBody { (varDeclaration (mytype (intType int)) j ;) (varDeclaration (mytype (intType int)) k ;) (varDeclaration (mytype (intType int)) aux02 ;) (varDeclaration (mytype (intType int)) aux01 ;) (statement size = (expression sz) ;) (statement number = (expression new int [ (expression sz) ]) ;) (statement j = (expression 1) ;) (statement k = (expression (expression size) + (expression 1)) ;) (statement while ( (expression (expression j) < (expression ( (expression size) ))) ) (statement { (statement aux01 = (expression (expression 2) * (expression j)) ;) (statement aux02 = (expression (expression k) - (expression 3)) ;) (statement number [ (expression j) ] = (expression (expression aux01) + (expression aux02)) ;) (statement j = (expression (expression j) + (expression 1)) ;) (statement k = (expression (expression k) - (expression 1)) ;) })) (statement return (expression 0) ;) })) })) <EOF>)
